import { z } from 'zod';

import { Tool } from './types';
import { JaegerClient } from '../client';

export class GetTraces implements Tool {
    name(): string {
        return 'get-traces';
    }

    description(): string {
        return 'Searches the spans as JSON array of object in the OpenTelemetry resource spans format';
    }

    paramsSchema() {
        return {
            serviceName: z
                .string()
                .describe('Filters spans generated by a specific service.'),
            operationName: z
                .string()
                .describe('Filters spans by a specific operation / span name.')
                .optional(),
            startTimeMin: z
                .string()
                .datetime()
                .describe(
                    'Start of the time interval (inclusive) for the query. ' +
                        'Only traces with spans that started on or after this time will be returned. ' +
                        'The HTTP API uses RFC 3339, section 5.6 format (e.g., "2017-07-21T17:32:28Z").'
                ),
            startTimeMax: z
                .string()
                .datetime()
                .describe(
                    'End of the time interval (exclusive) for the query. ' +
                        'Only traces with spans that started before this time will be returned. ' +
                        'The HTTP API uses RFC 3339, section 5.6 format (e.g., "2017-07-21T17:32:28Z").'
                ),
            durationMin: z
                .string()
                .describe(
                    'Minimum duration of a span in the trace. ' +
                        'Only traces with spans that lasted at least this long will be returned. ' +
                        'The HTTP API uses Golang\'s time format (e.g., \\"10s\\").'
                )
                .optional(),
            durationMax: z
                .string()
                .describe(
                    'Maximum duration of a span in the trace. ' +
                        'Only traces with spans that lasted at most this long will be returned. ' +
                        'The HTTP API uses Golang\'s time format (e.g., \\"10s\\").'
                )
                .optional(),
            searchDepth: z
                .number()
                .positive()
                .describe(
                    'Defines the maximum search depth. ' +
                        'Depending on the backend storage implementation, this may behave like an SQL `LIMIT` clause. ' +
                        'However, some implementations might not support precise limits, ' +
                        'and a larger value generally results in more traces being returned.'
                )
                .optional(),
        };
    }

    async handle(
        jaegerClient: JaegerClient,
        {
            serviceName,
            operationName,
            startTimeMin,
            startTimeMax,
            durationMin,
            durationMax,
            searchDepth,
        }: any
    ): Promise<string> {
        const response: any = await jaegerClient.get('/api/v3/traces', {
            'query.service_name': serviceName,
            'query.operation_name': operationName,
            'query.start_time_min': startTimeMin,
            'query.start_time_max': startTimeMax,
            'query.duration_min': durationMin,
            'query.duration_max': durationMax,
            'query.search_depth': searchDepth,
        });
        return JSON.stringify(response.result.resourceSpans);
    }
}
